#!/usr/bin/awk -bE

#
# Monitor runlog.txt generated by arcstat.awk
#   If an entry in runlog.txt shows an arcstat process was running
#   but 'ps aux' shows it's not running, then restart it.
#   Simulates toolforge continuous pool
#

# The MIT License (MIT)
#
# Copyright (c) 2024 by User:GreenC (at en.wikipedia.org)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

@include "library"

BEGIN {

  G["home"] = "/home/greenc/toolforge/arcstat/"
  G["runlogtxt"] = G["home"] "runlog.txt"

  if(!checkexists(G["runlogtxt"])) {
    print G["runlogtxt"] " is missing. No sites are running?"
    exit
  }

  Optind = Opterr = 1
  while ((C = getopt(ARGC, ARGV, "srk")) != -1) {
      opts++
      if(C == "s")                 #  -s Show running processes
        argShow = 1
      if(C == "r")                 #  -r Restart sites in runlog.txt if not already running
        argRun = 1
      if(C == "k")                 #  -k Print a list of PIDs to kill all processes
        argKill = 1
  }
  if(opts == 0) {
    print "\nrun.awk - monitor, start and kill arcstat processes\n"
    print "   -s        Show running processes and load"
    print "   -r        Restart sites listed in runlog.txt (if not already running)"
    print "   -k        Print a list of PIDs to kill. Pipe it through csh to invoke eg. ./run -k | csh\n"
    exit
  }

  if(argShow) 
    Debug = 1

  main()

}

function main() {

  # Step 1: get a list of running process into PS[host][domain] = <pid>

  # /usr/bin/ps aux | /usr/bin/grep arcstat.awk | /usr/bin/grep -v tcsh | /usr/bin/grep -v grep
  # greenc     93891  6.7  3.1 106728 96208 pts/3    S    00:52  48:35 /usr/bin/awk -bE /home/greenc/toolforge/arcstat/arcstat.awk -h ru -d wikipedia.org
  # greenc     95687  9.2  3.3 118928 103168 pts/3   S    00:52  66:31 /usr/bin/awk -bE /home/greenc/toolforge/arcstat/arcstat.awk -h te -d wikipedia.org

  command = Exe["ps"] " aux | " Exe["grep"] " arcstat.awk | " Exe["grep"] " -v tcsh | " Exe["grep"] " -v grep "
  if(Debug) 
    stdErr(command)
  ps = sys2var(command)
  if(Debug) 
    stdErr(ps)
  for(i = 1; i <= splitn(ps "\n", psa, i); i++) {
    if(split(psa[i], psb, " ") != 17) continue
    PS[psb[15]][psb[17]] = psb[2]
  }  

  if(Debug) {
# en.wikipedia.org.allpages.done.save
    
  }

  if(Debug || argKill) {
    if(Debug) {
      stdErr(length(PS) "\n----\nPS items")
      j = 0
    }
    if(length(PS) > 0) {
      for(k1 in PS)
        for(k2 in PS[k1]) {
          if(Debug) {
            done = G["home"] "log/" k1 "." k2 ".allpages.done"
            save = G["home"] "log/" k1 "." k2 ".allpages.done.save"
            res = ""
            if(checkexists(done) && checkexists(save)) {
              donec = int(sys2var(Exe["wc"] " " done " | " Exe["awk"] " '{print $1}'"))
              savec = int(sys2var(Exe["wc"] " " save " | " Exe["awk"] " '{print $1}'"))
              res = donec / savec
              split(res, ra, ".")
              res = substr(ra[2], 1, 2)
              if(length(res) == 1) 
                res = res "0"
            }
            if(res > -1)
              stdErr(k1 " " k2 " = " PS[k1][k2] " (" res "% done)")
            else
              stdErr(k1 " " k2 " = " PS[k1][k2])
            j++
          }
          else if(argKill) 
            print "kill " PS[k1][k2] " ; echo killing " k1 "." k2 
        }
    }
  }
  if(argKill) exit

  # Step 2: load runlog.txt and if not in PS[][] then run it

  if(Debug) 
    stdErr(j "\n----\nrunlog.txt")

  j = 0
  for(i = 1; i <= splitn(G["runlogtxt"], rla, i); i++) {
    if(split(rla[i], rlb, " ---- ") != 3) continue
    if(Debug) {
      stdErr(rla[i])
      j++
    }
    if(empty(PS[rlb[1]][rlb[2]])) {
      command = "(" G["home"] "arcstat.awk -h " rlb[1] " -d " rlb[2] ") &"
      if(Debug) 
        stdErr("Will run if -r): " command)
      else if(argRun) { 
        sleep(2)         
        print "Restarting: " command
        system(command)  # not sys2var() it hangs waiting for program to end
      }
    }
    else {
      if(!Debug) 
        stdErr("Already running: " rlb[1] "." rlb[2])
    }
  }
  if(Debug) {
    stdErr(j "\n----")
    print sys2var("w")
  }
  
}
